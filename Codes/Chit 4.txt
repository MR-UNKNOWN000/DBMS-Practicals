Hereâ€™s the complete code for the problem statement, designed to work with Oracle 10g. This includes table creation, sample data insertion, and a PL/SQL block that calculates the fine based on the number of days, updates the status, and inserts fine details into the `Fine` table if necessary.

### Step 1: Create Tables `Borrower` and `Fine`

```sql
-- Drop the tables if they already exist to avoid conflicts
DROP TABLE Fine;
DROP TABLE Borrower;

-- Create the Borrower table
CREATE TABLE Borrower (
    Roll_no NUMBER PRIMARY KEY,
    Name VARCHAR2(100),
    Date_of_Issue DATE,
    Book_Name VARCHAR2(100),  -- Ensure column names are as expected
    Status CHAR(1)  -- 'I' for Issued, 'R' for Returned
);

-- Create the Fine table with a foreign key reference to Borrower
CREATE TABLE Fine (
    Roll_no NUMBER,
    Fine_Date DATE,
    Amt NUMBER,
    CONSTRAINT fk_borrower FOREIGN KEY (Roll_no) REFERENCES Borrower(Roll_no)
);
```

### Step 2: Insert Sample Data into `Borrower` Table

```sql
-- Insert sample records into the Borrower table
INSERT INTO Borrower (Roll_no, Name, Date_of_Issue, Book_Name, Status) VALUES (1, 'John Doe', SYSDATE - 20, 'Database Systems', 'I');
INSERT INTO Borrower (Roll_no, Name, Date_of_Issue, Book_Name, Status) VALUES (2, 'Jane Smith', SYSDATE - 35, 'Operating Systems', 'I');
INSERT INTO Borrower (Roll_no, Name, Date_of_Issue, Book_Name, Status) VALUES (3, 'Alice Brown', SYSDATE - 10, 'Computer Networks', 'I');

COMMIT;
```

### Step 3: PL/SQL Block to Calculate Fine, Update Status, and Handle Exceptions

This PL/SQL block will:
1. Accept `Roll_no` and `Book_Name` as inputs.
2. Check the number of days since the book was issued.
3. Calculate the fine if the book is overdue.
4. Update the `Status` in the `Borrower` table.
5. Insert fine details into the `Fine` table if applicable.
6. Handle exceptions as needed.

```
DECLARE
    v_roll_no NUMBER := 1;  -- Input: Roll number of the borrower
    v_book_name VARCHAR2(100) := 'Database Systems';  -- Input: Book name
    v_date_of_issue DATE;
    v_status CHAR(1);
    v_days NUMBER;
    v_fine_amt NUMBER := 0;
    overdue_exception EXCEPTION;  -- Custom exception for overdue books

BEGIN
    -- Retrieve the date of issue and status for the given roll number and book name
    SELECT Date_of_Issue, Status INTO v_date_of_issue, v_status
    FROM Borrower
    WHERE Roll_no = v_roll_no AND Book_Name = v_book_name;

    -- Calculate the number of days since the date of issue
    v_days := TRUNC(SYSDATE - v_date_of_issue);

    -- Output the value of v_days for debugging
    DBMS_OUTPUT.PUT_LINE('Number of days overdue: ' || v_days);

    -- Check if the book is overdue and calculate the fine
    IF v_days > 15 THEN
        IF v_days <= 30 THEN
            v_fine_amt := (v_days - 15) * 5;  -- Rs 5 per day for 16-30 days
        ELSE
            v_fine_amt := (15 * 5) + ((v_days - 30) * 50);  -- Rs 5/day for 15 days + Rs 50/day for >30 days
        END IF;
        
        -- Raise custom exception for overdue books
        RAISE overdue_exception;
    END IF;

    -- Update the status to 'R' (Returned) in the Borrower table
    UPDATE Borrower
    SET Status = 'R'
    WHERE Roll_no = v_roll_no AND Book_Name = v_book_name;

    -- Handle overdue fine by inserting details into the Fine table
    IF v_fine_amt > 0 THEN
        INSERT INTO Fine (Roll_no, Fine_Date, Amt)
        VALUES (v_roll_no, SYSDATE, v_fine_amt);
    END IF;

    -- Commit changes
    COMMIT;

    -- Output the result
    DBMS_OUTPUT.PUT_LINE('Book returned successfully.');
    IF v_fine_amt > 0 THEN
        DBMS_OUTPUT.PUT_LINE('Fine Amount: Rs ' || v_fine_amt);
    END IF;

EXCEPTION
    WHEN overdue_exception THEN
        DBMS_OUTPUT.PUT_LINE('Book is overdue. Fine applied.');
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No record found for the given Roll_no and Book_Name.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/
```
### Explanation of PL/SQL Block

- **Inputs**: The block takes `Roll_no` and `Book_Name` as inputs to identify the record in `Borrower`.
- **Days Calculation**: It calculates the number of days since `Date_of_Issue`.
- **Fine Calculation**: Based on the number of overdue days, it calculates the fine:
  - `Rs 5` per day for 16-30 days.
  - `Rs 50` per day for more than 30 days.
- **Status Update**: Updates the `Status` to `'R'` for returned.
- **Fine Insertion**: If the fine is applicable, it inserts details into the `Fine` table.
- **Exception Handling**: Custom and named exceptions handle overdue fines and unexpected errors.

### Expected Output in `DBMS_OUTPUT`

- For an overdue book, you should see messages like:
    ```plaintext
    Book is overdue. Fine applied.
    Book returned successfully.
    Fine Amount: Rs 75  -- Example fine amount based on the calculation
    ```

- If no overdue fine applies, you will only see:
    ```plaintext
    Book returned successfully.
    ```

### Verification Queries

After running the PL/SQL block, you can verify the results:

```sql
-- Check updated Borrower table
SELECT * FROM Borrower;

-- Check Fine table for fine details
SELECT * FROM Fine;
```
