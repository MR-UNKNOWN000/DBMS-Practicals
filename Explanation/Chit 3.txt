Chit No. 3 : SQL Queries – all types of Join, Sub-Query and View:
JOINS are used in SQL to combine records from two or more tables based on a related column. Common JOIN types include INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL OUTER JOIN. Here’s a breakdown of each type, along with example problems and solutions.
Problem Statement:(Any 5)
1.Find the names of all actors and the titles of the movies in which they appeared.
Assume we have an actors table with actor_id, first_name, and last_name, a movies table with movie_id and title, and a cast table with actor_id and movie_id that links actors to movies.
2. List all movies and the names of actors who appeared in each movie. Include movies that don’t have any actors associated with them
3. List all actors and the titles of the movies they appeared in, including actors who have not appeared in any movie.
4. List all movies and actors, including movies without actors and actors who have not been cast in any movie.
5. Find the names of all actors who appeared in a movie directed by "Christopher Nolan".
6.List the titles of movies that have a rating higher than the average rating of all movies.



Here is an algorithm that describes the steps involved in each part of the SQL code you provided:

### Step 1: Create tables
1. **Create `actors` table:**
   - Define `actor_id` as the primary key.
   - Create two columns: `first_name` and `last_name` for storing the actor’s first and last names.
   
2. **Create `movies` table:**
   - Define `movie_id` as the primary key.
   - Create three columns: `title` for the movie title, `director` for the movie director's name, and `rating` for the movie's rating (number with up to 3 digits and one decimal place).

3. **Create `cast` table:**
   - Define `actor_id` and `movie_id` as a composite primary key, which means both columns together uniquely identify a record.
   - Create foreign keys to reference `actor_id` from the `actors` table and `movie_id` from the `movies` table. This establishes a relationship between actors and movies in the cast table.

### Step 2: Insert sample data into the tables
1. Insert sample data into the `actors` table:
   - Insert data for four actors: Leonardo DiCaprio, Brad Pitt, Tom Hanks, and Meryl Streep.

2. Insert sample data into the `movies` table:
   - Insert data for four movies: Inception, Titanic, Fight Club, and The Post, along with their respective directors and ratings.

3. Insert sample data into the `cast` table:
   - Define which actor appeared in which movie by inserting relevant `actor_id` and `movie_id` pairs into the `cast` table. This helps create the relationship between actors and the movies they appeared in.

### Step 3: Queries to solve the problems

1. **Problem 1: Find the names of all actors and the titles of the movies in which they appeared.**
   - **Algorithm:**
     1. Join the `actors` table with the `cast` table using `actor_id` to link actors to the cast list.
     2. Join the result with the `movies` table using `movie_id` to retrieve the movie title.
     3. Select `first_name`, `last_name`, and `title` from the joined tables.

2. **Problem 2: List all movies and the names of actors who appeared in each movie. Include movies that don’t have any actors associated with them.**
   - **Algorithm:**
     1. Perform a left join between the `movies` table and the `cast` table using `movie_id`. This ensures all movies are included, even those without actors.
     2. Perform another left join with the `actors` table to retrieve the actor's name.
     3. Select the movie title and actor names. If no actor is associated with a movie, display `NULL` for the actor's name.

3. **Problem 3: List all actors and the titles of the movies they appeared in, including actors who have not appeared in any movie.**
   - **Algorithm:**
     1. Perform a left join between the `actors` table and the `cast` table using `actor_id` to include all actors, even those without a movie.
     2. Perform another left join with the `movies` table to retrieve the movie title.
     3. Select `first_name`, `last_name`, and `title`. For actors without movies, display `NULL` for the movie title.

4. **Problem 4: List all movies and actors, including movies without actors and actors who have not been cast in any movie.**
   - **Algorithm:**
     1. Perform a left join between the `movies` table and the `cast` table using `movie_id` to ensure all movies are included, even those without actors.
     2. Perform another left join with the `actors` table using `actor_id` to ensure all actors are included, even those without movies.
     3. Select movie title and actor names, ensuring that `NULL` is shown for missing data (either for movies without actors or actors without movies).

5. **Problem 5: Find the names of all actors who appeared in a movie directed by "Christopher Nolan".**
   - **Algorithm:**
     1. Join the `actors` table with the `cast` table using `actor_id` to link actors to movies.
     2. Join the result with the `movies` table using `movie_id` to link movies to their directors.
     3. Filter the results where the `director` column is equal to 'Christopher Nolan'.
     4. Select the distinct `first_name` and `last_name` of the actors.

6. **Problem 6: List the titles of movies that have a rating higher than the average rating of all movies.**
   - **Algorithm:**
     1. First, calculate the average rating of all movies using a subquery (`SELECT AVG(rating) FROM movies`).
     2. Compare the rating of each movie with the calculated average.
     3. Select the `title` of movies that have a rating greater than the calculated average.

This breakdown of the algorithm will guide the understanding of each SQL query step.