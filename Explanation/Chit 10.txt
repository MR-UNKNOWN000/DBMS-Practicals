Chit No. 10 :MongoDB Queries:
DesignandDevelopMongoDBQueriesusingCRUDoperations.(UseCRUDoperations, SAVE method, logical operators etc.).



The algorithm for the provided MongoDB code can be broken down into the following steps:

---

### **Algorithm for MongoDB Operations**

1. **Step 1: Switch to the 'comp' database**
    - **Action**: Use the `use` command to switch the active database to `comp`.
    - **Operation**: This command sets the context to the `comp` database where all subsequent operations will take place.

2. **Step 2: Create the 'employee' collection**
    - **Action**: Use the `db.createCollection("employee")` to create a new collection named `employee`.
    - **Operation**: The system creates an empty collection within the current database to store employee data.

3. **Step 3: Insert multiple records into the 'employee' collection**
    - **Action**: Use the `db.employee.insertMany()` method to insert multiple records (documents) into the `employee` collection.
    - **Operation**: The function inserts 6 documents into the `employee` collection, each representing an employee with attributes such as `id`, `name`, `city`, `age`, and `salary`.

4. **Step 4: Find all documents in the 'employee' collection**
    - **Action**: Use the `db.employee.find()` method to retrieve all documents from the `employee` collection.
    - **Operation**: This command scans the entire `employee` collection and returns a list of all inserted employee documents with all fields included.

5. **Step 5: Find employees with a salary greater than 25,000, showing only name and city**
    - **Action**: Perform an aggregation query using `$match` and `$project`:
        - **$match**: Filters documents where the `salary` is greater than 25,000.
        - **$project**: Specifies that only the `name` and `city` fields should be included in the result, excluding the `_id` field.
    - **Operation**: The aggregation pipeline filters employees with salary greater than 25,000, and then projects only their name and city in the result.

6. **Step 6: Group employees by city and sort them in descending order of city name**
    - **Action**: Perform an aggregation query using `$group` and `$sort`:
        - **$group**: Groups employees by their `city`. Each group will represent a unique city, and the `_id` field will store the city name.
        - **$sort**: Sorts the grouped results in descending order of the city name (i.e., sorting by `_id` in descending order).
    - **Operation**: This aggregation will return a list of cities (grouped by employee city) sorted in descending order of the city name.

7. **Step 7: Sort employees by salary (ascending), show name and salary, and limit to the top 3 employees**
    - **Action**: Perform an aggregation query using `$sort`, `$project`, and `$limit`:
        - **$sort**: Sorts employees in ascending order of their `salary`.
        - **$project**: Specifies that only the `name` and `salary` fields should be included, excluding `_id`.
        - **$limit**: Limits the result to the top 3 documents (i.e., the top 3 employees with the lowest salary).
    - **Operation**: This aggregation returns the top 3 employees based on their salary in ascending order, displaying only their name and salary.

---

### **Flow of Operations**

1. **Switch to Database**: 
    - `use comp` → Switches to the `comp` database.
2. **Create Collection**:
    - `db.createCollection("employee")` → Creates a new collection named `employee`.
3. **Insert Data**:
    - `db.employee.insertMany([...])` → Inserts multiple employee records into the collection.
4. **Find All Records**:
    - `db.employee.find()` → Retrieves all employee documents in the collection.
5. **Filter and Project Specific Fields**:
    - `db.employee.aggregate([...])` → Filters employees with salary > 25,000 and projects only name and city.
6. **Group by City and Sort**:
    - `db.employee.aggregate([...])` → Groups employees by city and sorts by city name in descending order.
7. **Sort by Salary and Limit Results**:
    - `db.employee.aggregate([...])` → Sorts employees by salary in ascending order and limits the result to the top 3 employees.

---

### **Expected Output of Each Step**
1. **Switch to Database**: No output (confirmation of switching).
2. **Create Collection**: Confirmation that the collection was created (`{ ok: 1 }`).
3. **Insert Data**: Confirmation of data insertion (`{ acknowledged: true, insertedIds: {...} }`).
4. **Find All Records**: A list of all inserted employee documents.
5. **Filter and Project**: A list of employees with salary greater than 25,000, showing only `name` and `city`.
6. **Group by City and Sort**: A list of cities, sorted in descending order.
7. **Sort by Salary and Limit**: A list of the top 3 employees sorted by salary in ascending order, showing only `name` and `salary`.

---

This algorithm outlines the sequence of MongoDB commands and their corresponding operations for performing database queries on employee data.